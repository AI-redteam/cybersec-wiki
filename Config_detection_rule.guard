# AWS Config Guard Rule: Detects SQS Wildcard Account ID in a specific role pattern
#
# This rule checks IAM roles matching a specific naming convention
# for any IAM policy
# (inline or managed) that allows SQS actions on a resource ARN
# with a wildcard (*) in the Account ID position.
#
# This is for detection of MWAA wildcard default configuration 
# cross-account vulnerability. 
#
#
# Vulnerability Pattern Detected:
#   arn:aws:sqs:region:*:queue-name
#
# Target Role Pattern:
#   *add example of pattern from line 18*

# 1. DEFINE PATTERNS
# ---
# Regex to match your specific role name.
# Allows for env names with letters, numbers, and hyphens.
let target_role_pattern = <insert regex here>

# Regex to find any SQS action (e.g., "sqs:SendMessage", "sqs:*")
let sqs_action_pattern = /^sqs:.*/

# Regex to find the vulnerable SQS ARN pattern (wildcard in account ID)
let bad_sqs_arn_pattern = /^arn:[^:]*:sqs:[^:]+:\*:.*/


# 2. DEFINE RULE
# ---
# This rule only applies to IAM Roles that match your target_role_pattern
rule check_sqs_wildcard_for_target_role when
    resourceType == "AWS::IAM::Role"
    and configuration.roleName == %target_role_pattern
{
    # 3. CHECK INLINE POLICIES
    # ---
    when supplementaryConfiguration exists and supplementaryConfiguration.InlinePolicies exists {
        supplementaryConfiguration.InlinePolicies[*] {
            let policy_statements = this.PolicyDocument.Statement

            when %policy_statements exists {
                %policy_statements[*] {
                    # Check for "Allow" statements with SQS actions and bad resources
                    when Effect == "Allow"
                         and Action exists
                         and Resource exists
                    {
                        let actions = when Action is_string { [ Action ] } else { Action }
                        let resources = when Resource is_string { [ Resource ] } else { Resource }

                        # Check if any action is an SQS action
                        let has_sqs_action = some %actions[*] {
                            this == %sqs_action_pattern or this == "*"
                        }

                        # If it has an SQS action, check all its resources
                        when %has_sqs_action {
                            %resources[*] {
                                # If any resource matches the bad pattern, flag it
                                when this == %bad_sqs_arn_pattern {
                                    <<
                                        VIOLATION: Role '{%configuration.roleName}' has an INLINE policy with an SQS wildcard resource ARN.
                                        Vulnerable Resource: {this}
                                        This allows SQS actions against queues in ANY AWS account.
                                    >>
                                }
                            }
                        }
                    }
                }
            }
        }
    } # End of inline policy check

    # 4. CHECK MANAGED POLICIES
    # ---
    when supplementaryConfiguration exists and supplementaryConfiguration.ManagedPolicies exists {
        supplementaryConfiguration.ManagedPolicies[*] {
            let policy_name = this.PolicyName
            let policy_statements = this.PolicyDocument.Statement

            when %policy_statements exists {
                %policy_statements[*] {
                    # Check for "Allow" statements with SQS actions and bad resources
                    when Effect == "Allow"
                         and Action exists
                         and Resource exists
                    {
                        let actions = when Action is_string { [ Action ] } else { Action }
                        let resources = when Resource is_string { [ Resource ] } else { Resource }

                        # Check if any action is an SQS action
                        let has_sqs_action = some %actions[*] {
                            this == %sqs_action_pattern or this == "*"
                        }

                        # If it has an SQS action, check all its resources
                        when %has_sqs_action {
                            %resources[*] {
                                # If any resource matches the bad pattern, flag it
                                when this == %bad_sqs_arn_pattern {
                                    <<
                                        VIOLATION: Role '{%configuration.roleName}' has a MANAGED policy ('{%policy_name}') with an SS wildcard resource ARN.
                                        Vulnerable Resource: {this}
                                        This allows SQS actions against queues in ANY AWS account.
                                    >>
                                }
                            }
                        }
                    }
                }
            }
        }
    } 
}
